from slimflow import GridRuns
import numpy as np
import polars as pl
import tskit
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

if not len(config):
    raise ValueError("config file not specified on command line, use --configfile config.json")

run = GridRuns(config)

# Generate all the targets for this YAML file.
sims_df = run.generate_targets()

# The SLiM rule: a simple, small amount of boilerplate code will run all
# simulations.
rule slim:
  input: run.script, **run.input
  output: **run.target_template()
  shell: run.slim_cmd()

# Now suppose we wanted to calculate some statistic(s) *per* output file (this
# could combine them too). We just need to map the *target template* from one
# suffix to another. Note that this can be done in parallel easily, which is
# useful for more computational tasks like adding mutations to trees.
rule post_process:
  input: run.script, **run.target_template(suffices={'tree': 'treeseq.tree'})
  output: **run.target_template(suffices={'summary': 'summary.tsv'})
  run:
    # load the tree file
    tree = tskit.load(input['tree'])

    # calculate windowed diversity
    windows = np.arange(0, tree.sequence_length+1, 10000)
    pi = tree.diversity(mode='branch', windows=windows)

    # output results
    midpoint = (windows[1:] + windows[:-1])/2
    pi_df = pl.DataFrame(dict(midpoint=midpoint, pi=pi))
    pi_df.write_csv(output['summary'], separator="\t")


# Dataframe of summary file targets.
summary_df = run.generate_targets(suffices={'summary': 'summary.tsv'})

# The rule for summarizing all the results.
rule process:
  input: summary_df['filepath']
  output: "summary.tsv"
  run:
    # If this rule runs, then all summary targets have been created.
    assert len(input) == summary_df.shape[0]

    # Load in all diversity summary dataframes.
    dfs = [pl.read_csv(f, separator='\t').with_columns(pl.lit(f).alias("filepath"))
                 for f in input]
    df = pl.concat(dfs)

    # Join in keys based on filepath - this brings in parameters.
    df = df.join(summary_df.select(pl.exclude('suffix')), 
                 left_on='filepath', right_on='filepath', how='inner')

    # A toy summarization example: take mean diversity.
    df = df.groupby('key').mean().select(pl.exclude(['rep', 'seed', 'filename']))

    # Write output.
    df.write_csv(output[0], separator='\t')


# Create a figure from the summarized results.
rule figure:
  input: "summary.tsv"
  output: "figure.pdf"
  run:
    d = pl.read_csv(input[0], separator='\t')
    fig, ax = plt.subplots()
    ax.scatter(d['mu'] / d['sh'], d['pi']/ (4*d['N']))
    ax.semilogx()
    ax.set_ylabel('B')
    ax.set_xlabel('$\\mu/s$')
    fig.savefig(output[0])

rule all:
  input: sims_df['filepath'], "figure.pdf"
